##########################################################################################
# CASO 1: [AVISO] Presupuesto en borrador
#         Condicion:
#           Estado 'Borrador'
#         Accion:
#           Enviar correo a usuario (con plantilla)
##########################################################################################
-
    Asignar el campo field a la condicion warning_condition_1
-
    !python {model: warning.condition, id: warning_condition_1}: |

        model_ids = self.pool.get('ir.model').search(
            cr, uid, [('model', '=', 'sale.order')])
        if model_ids:
            fields_ids = self.pool.get('ir.model.fields').search(
                cr, uid, [('model_id', '=', model_ids[0]), ('name', '=', 'state')])
            if fields_ids:
                self.pool.get('warning.condition').write(cr, uid, ref('warning_condition_1'), {
                    'field_id': fields_ids[0],
                })

-
    Comprobar que el campo field_id de la condicion warning_condition_1 esta relleno
-
    !assert {model: warning.condition, id: warning_condition_1}:
        - type(field_id) != 'ir.model.fields'

-
    Asignar el campo email_tmpl_id al aviso
-
    !python {model: warning.messaging, id: warning_messaging_1}: |

        email_tmpl_ids = self.pool.get('email.template').search(
            cr, uid, [('name', '=', 'Sales Order - Send by Email')])
        if email_tmpl_ids:
            self.pool.get('warning.messaging').write(cr, uid, ref('warning_messaging_1'), {
                'email_tmpl_id': email_tmpl_ids[0],
            })

-
    Comprobar que el campo email_tmpl_id del aviso warning_messaging_1 esta relleno
-
    !assert {model: warning.messaging, id: warning_messaging_1}:
        - type(email_tmpl_id) != 'email.template'


-
    Activar aviso presupuesto en borrador
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        self.to_active()

-
    Comprobar que se ha activado
-
    !assert {model: warning.messaging, id: warning_messaging_1}:
        - state == 'active'

-
    Desactivar el cron creado
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        self.cron_id.active = False

-
    Lanzar el cron asociado al aviso
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        cr, uid, context = self.env.args
        cron = self.cron_id
        cron.with_context(active_ids=cron.id)._callback(
            cron.model, cron.function, cron.args, cron.id)

# @ TODO No encuentro el correo enviado
# -
#     Comprobar que se ha creado el correo
# -
#     !python {model: sale.order, id: sale_order_1}: |
#         from datetime import datetime
#         import datetime as dt

#         now_str = str(datetime.now())
#         before_str = str((datetime.now() - dt.timedelta(minutes=1)))
#         msgs = []
#         try:
#             # Correo
#             mail = self.env['mail.mail'].search_count(
#                 [('res_id', '=', self.id),
#                  # ('type', '=', 'notification'),
#                  # ('body', 'ilike', '%Han pasado X dias desde env√≠o de presupuesto sin respuesta del cli%'),
#                  ('create_date', '<', now_str),
#                  ('create_date', '>', before_str),
#                ]
#             )
#         except Exception as e:
#             assert False, 'Error al hacer el search. %s' % e

#         assert mail > 0, 'No se ha generado el correo.'



