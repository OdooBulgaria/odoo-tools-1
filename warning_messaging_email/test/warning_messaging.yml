##########################################################################################
# CASO 1: [AVISO] Presupuesto en borrador
#         Condicion:
#           Estado 'Borrador'
#         Accion:
#           Enviar correo a usuario (con plantilla)
##########################################################################################
-
    Asignar el campo field a la condicion warning_condition_1
-
    !python {model: warning.condition, id: warning_condition_1}: |

        model_ids = self.pool.get('ir.model').search(
            cr, uid, [('model', '=', 'sale.order')])
        if model_ids:
            fields_ids = self.pool.get('ir.model.fields').search(
                cr, uid, [('model_id', '=', model_ids[0]), ('name', '=', 'state')])
            if fields_ids:
                self.pool.get('warning.condition').write(cr, uid, ref('warning_condition_1'), {
                    'field_id': fields_ids[0],
                })

-
    Comprobar que el campo field_id de la condicion warning_condition_1 esta relleno
-
    !assert {model: warning.condition, id: warning_condition_1}:
        - type(field_id) != 'ir.model.fields'

-
    Asignar el campo email_type al aviso
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        self.pool.get('warning.messaging').write(cr, uid, ref('warning_messaging_1'), {
            'email_type': 'with_template',
        })

-
    Asignar el campo email_tmpl_id al aviso
-
    !python {model: warning.messaging, id: warning_messaging_1}: |

        email_tmpl_ids = self.pool.get('email.template').search(
            cr, uid, [('name', '=', 'Sales Order - Send by Email')])
        if email_tmpl_ids:
            self.pool.get('warning.messaging').write(cr, uid, ref('warning_messaging_1'), {
                'email_tmpl_id': email_tmpl_ids[0],
            })

-
    Comprobar que el campo email_tmpl_id del aviso warning_messaging_1 esta relleno
-
    !assert {model: warning.messaging, id: warning_messaging_1}:
        - type(email_tmpl_id) != 'email.template'


-
    Activar aviso presupuesto en borrador
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        self.to_active()

-
    Comprobar que se ha activado
-
    !assert {model: warning.messaging, id: warning_messaging_1}:
        - state == 'active'

-
    Desactivar el cron creado
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        self.cron_id.active = False

-
    Lanzar el cron asociado al aviso
-
    !python {model: warning.messaging, id: warning_messaging_1}: |
        cr, uid, context = self.env.args
        cron = self.cron_id
        cron.with_context(active_ids=cron.id)._callback(
            cron.model, cron.function, cron.args, cron.id)

# @TODO No encuentro este correo en la tabla, aunque se envia correctamente
# -
#     Comprobar que se ha creado el correo
# -
#     !python {model: sale.order, id: sale_order_1}: |
#         from datetime import datetime
#         import datetime as dt

#         now_str = str(datetime.now())
#         before_str = str((datetime.now() - dt.timedelta(minutes=1)))

#         try:
#             # Como el correo no se envia en los test, en lugar de buscar en la tabla mail.message, lo hacemos en mail.mail
#             mail_mail = self.env['mail.mail'].search_count(
#                 [('body_html', 'like', '%Here is your quotation%'),
#                  ('create_date', '<', now_str),
#                  ('create_date', '>', before_str),
#                ]
#             )
#         except Exception as e:
#             assert False, 'Error al hacer el search. %s' % e

#         assert mail_mail > 0, 'No se ha generado el correo.'



##########################################################################################
# CASO 2: [AVISO] Presupuesto en borrador
#         Condicion:
#           Estado 'Borrador'
#         Accion:
#           Enviar correo a usuario (sin plantilla)
##########################################################################################
-
    Asignar el campo field a la condicion warning_condition_2
-
    !python {model: warning.condition, id: warning_condition_2}: |

        model_ids = self.pool.get('ir.model').search(
            cr, uid, [('model', '=', 'sale.order')])
        if model_ids:
            fields_ids = self.pool.get('ir.model.fields').search(
                cr, uid, [('model_id', '=', model_ids[0]), ('name', '=', 'state')])
            if fields_ids:
                self.pool.get('warning.condition').write(cr, uid, ref('warning_condition_2'), {
                    'field_id': fields_ids[0],
                })

-
    Comprobar que el campo field_id de la condicion warning_condition_2 esta relleno
-
    !assert {model: warning.condition, id: warning_condition_2}:
        - type(field_id) != 'ir.model.fields'

-
    Asignar los campos email_type, email_subject, email_body_html, email_attachment_ids al aviso
-
    !python {model: warning.messaging, id: warning_messaging_2}: |
        # Buscar un adjunto cualquiera para asignar
        attach_ids = self.pool.get('ir.attachment').search(
            cr, uid, [])
        attachs = None
        if attach_ids:
            attachs = [attach_ids[0]]

        self.pool.get('warning.messaging').write(cr, uid, ref('warning_messaging_2'), {
            'email_type': 'without_template',
            'email_subject': 'Asunto prueba',
            'email_body_html': u'''<span style="color: rgb(76, 76, 76); font-family: 'Lucida Grande', Helvetica, Verdana, Arial, sans-serif; font-size: 13px;">Cuerpo html para probar:</span><div style="color: rgb(76, 76, 76); font-family: 'Lucida Grande', Helvetica, Verdana, Arial, sans-serif; font-size: 13px;"><br></div><div style="color: rgb(76, 76, 76); font-family: 'Lucida Grande', Helvetica, Verdana, Arial, sans-serif; font-size: 13px;"><span class="Apple-tab-span" style="white-space:pre">    </span><span style="font-weight: bold;">prueba</span></div><div style="color: rgb(76, 76, 76); font-family: 'Lucida Grande', Helvetica, Verdana, Arial, sans-serif; font-size: 13px;"><span style="font-weight: bold;"><br></span></div><div><span style="font-style: italic;">Lista prueba:</span></div><div><ol><li>Punto 1</li><li>Punto 2</li><li>Punto 3</li></ol><div style="color: rgb(76, 76, 76); font-family: 'Lucida Grande', Helvetica, Verdana, Arial, sans-serif; font-size: 13px;"><span class="Apple-tab-span" style="white-space:pre"> </span></div></div>''',
            'email_attachment_ids': [(6, 0, attachs)]
        })

-
    Activar aviso presupuesto en borrador
-
    !python {model: warning.messaging, id: warning_messaging_2}: |
        self.to_active()

-
    Comprobar que se ha activado
-
    !assert {model: warning.messaging, id: warning_messaging_2}:
        - state == 'active'

-
    Desactivar el cron creado
-
    !python {model: warning.messaging, id: warning_messaging_2}: |
        self.cron_id.active = False

-
    Lanzar el cron asociado al aviso
-
    !python {model: warning.messaging, id: warning_messaging_2}: |
        cr, uid, context = self.env.args
        cron = self.cron_id
        cron.with_context(active_ids=cron.id)._callback(
            cron.model, cron.function, cron.args, cron.id)

-
    Comprobar que se ha creado el correo
-
    !python {model: sale.order, id: sale_order_1}: |
        from datetime import datetime
        import datetime as dt

        now_str = str(datetime.now())
        before_str = str((datetime.now() - dt.timedelta(minutes=1)))

        try:
            # Como el correo no se envia en los test, en lugar de buscar en la tabla mail.message, lo hacemos en mail.mail
            mail_mail = self.env['mail.mail'].search_count(
                [('body_html', 'like', '%Cuerpo html para probar:%'),
                 ('create_date', '<', now_str),
                 ('create_date', '>', before_str),
               ]
            )
        except Exception as e:
            assert False, 'Error al hacer el search. %s' % e

        assert mail_mail > 0, 'No se ha generado el correo.'
